writeStr(prompt);
writeStr(prompt);

def f1(b: integer, e: integer, www: scalar) -> integer:
    return 1 + 1;
enddef;

f1(ee,ee,ee);

2    +      3    -   4 * (4-5)/7;
-2+-3+-4+-5;
((1 + 2) * (3 - 1)) / (2 + 3);
+1 + -2 - +3 * -4 / +2;
-(-1 + -(-2 + 3)) + 4;
4 * (3 + 1) / (2 - 1);
5 / (1 - 1);
((-2 + 3) * 5 - 10 / 2) + (7 % 3) * (8 / 2 - 1);

i, j: scalar;

i, j: integer;


grades[5]: scalar;

def main():

enddef;

xaaz = 1+1;

const pi = 3.14152: scalar;


def f1(b: integer, e: integer, www: scalar) -> integer:
    return 1 + 1;
enddef;

def f1(b: integer, e: integer, www: scalar) -> integer:
    return 1;
enddef;

def f4(prompt: str, msg:str):
    1+1;
    dddd: integer;
enddef;

f4(r,y);

def f4(prompt: str, msg:str):
    sum: bool;
    1+1;
    1+2;

enddef;

grades[5]: scalar;

comp Coordinates:
    #latitude, #longitude: scalar;
endcomp;

comp Niggggg:
    #latitude, #longitude: scalar;
endcomp;


w, z: Coordinates;


w[]: Niggggg;


comp Circle:
    #x, #y: scalar;
    #radius: scalar;
    def area() -> scalar: return 3.14 * (#radius ** 2); enddef;
    def perimeter() -> scalar: return 2 * 3.14 * #radius; enddef;
endcomp;

c1, c2: Circle;

def totalArea(size: integer , ddd: scalar, c[]: Circle) -> scalar:
    i: integer;
    sum: scalar;

    return sum;
enddef;

for num in [3: limit+1: 2]:
    1+1;
    1+1;
endfor;


def cube(prompt: str):
    1+1;
    1+2;

enddef;

cube(b+3);
-a ;
a + b * (b / a);
4 + 50.0*x / 2.45; -- αριθμητική έκφραση
(a+1) % cube(b+3); -- αριθμητική έκφραση με κλήση συνάρτησης
(a <= b) and (d <= c); -- τελεστές λογικοί με σχεσιακούς
(c+a) != (2*d); -- τελεστές αριθμητικοί με σχεσιακούς
a + b[(k+1)*2]; -- αριθμητική έκφραση με πίνακα


  a[i] = i;



for i in [0:N]:
    a[i] = i;
    for i in [0:1:N]:
        a[i] = i;
    endfor;
endfor;




a := [i for i:100]:integer;
sss := [d /3 for d:200]:integer;

half := [ x / 2 for x: integer in a of 100] : scalar;
fdd := [ y + 5 for y: scalar in zzz of 30] : integer;

if (n % 2 == 0):
result = False;
else:
i = 3;
isPrime = True;
while (isPrime and (i < n / 2) ):
isPrime = n % i != 0;
i = i + 2;
endwhile;
result = isPrime;
endif;

