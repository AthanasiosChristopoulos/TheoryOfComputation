-- Grocery Store Inventory Management System
-- A program to manage inventory of products in a grocery store

-- Global variables
next_random: integer;
maxProducts: integer;

-- Random number generator
def next() -> integer:
    next_random = (next_random * 1103515245 + 12345) % 2147483648;
    if (next_random < 0):
        next_random = -next_random;
    endif;
    return next_random;
enddef;

-- Component for product category
comp Category:
    #name: str;
    #id: integer;
    
    def setCategory(n: str, i: integer):
        #name = n;
        #id = i;
    enddef;
    
    def printCategory():
        write("Category: %s (ID: %d)\n", #name, #id);
    enddef;
endcomp;

-- Component for product
comp Product:
    #name: str;
    #id: integer;
    #price: scalar;
    #quantity: integer;
    #category: Category;
    #expiryDays: integer;
    
    def setProduct(n: str, i: integer, p: scalar, q: integer, c: Category, e: integer):
        #name = n;
        #id = i;
        #price = p;
        #quantity = q;
        #category = c;
        #expiryDays = e;
    enddef;
    
    def updateQuantity(q: integer):
        #quantity = #quantity + q;
    enddef;
    
    def updatePrice(p: scalar):
        #price = p;
    enddef;
    
    def getValue() -> scalar:
        return #price * #quantity;
    enddef;
    
    def printProduct():
        write("Product: %s (ID: %d)\n", #name, #id);
        write("  Price: %.2f, Quantity: %d, Expiry: %d days\n", #price, #quantity, #expiryDays);
        write("  Category: %s\n", #category.#name);
        write("  Total Value: %.2f\n", self.getValue());
    enddef;
endcomp;

-- Component for grocery store
comp GroceryStore:
    #name: str;
    #location: str;
    #products[100]: Product;
    #numProducts: integer;
    
    def setStore(n: str, l: str):
        #name = n;
        #location = l;
        #numProducts = 0;
    enddef;
    
    def addProduct(p: Product):
        if (#numProducts < maxProducts):
            #products[#numProducts] = p;
            #numProducts = #numProducts + 1;
            write("Product '%s' added successfully.\n", p.#name);
        else:
            write("Error: Maximum product limit reached.\n");
        endif;
    enddef;
    
    def findProduct(id: integer) -> integer:
        for i in [0 : #numProducts]:
            if (#products[i].#id == id):
                return i;
            endif;
        endfor;
        return -1;
    enddef;
    
    def updateProductQuantity(id: integer, q: integer) -> bool:
        index: integer;
        index = self.findProduct(id);
        
        if (index >= 0):
            #products[index].updateQuantity(q);
            write("Product '%s' quantity updated to %d.\n", 
                  #products[index].#name, #products[index].#quantity);
            return True;
        else:
            write("Error: Product with ID %d not found.\n", id);
            return False;
        endif;
    enddef;
    
    def updateProductPrice(id: integer, p: scalar) -> bool:
        index: integer;
        index = self.findProduct(id);
        
        if (index >= 0):
            #products[index].updatePrice(p);
            write("Product '%s' price updated to %.2f.\n", 
                  #products[index].#name, #products[index].#price);
            return True;
        else:
            write("Error: Product with ID %d not found.\n", id);
            return False;
        endif;
    enddef;
    
    def calculateTotalInventoryValue() -> scalar:
        total: scalar;
        total = 0;
        
        for i in [0 : #numProducts]:
            total = total + #products[i].getValue();
        endfor;
        
        return total;
    enddef;
    
    def printInventory():
        write("\n=== %s Inventory (%s) ===\n", #name, #location);
        write("Total Products: %d\n\n", #numProducts);
        
        for i in [0 : #numProducts]:
            #products[i].printProduct();
            write("\n");
        endfor;
        
        write("Total Inventory Value: %.2f\n", self.calculateTotalInventoryValue());
    enddef;
    
    def printLowStockItems(threshold: integer):
        write("\n=== Low Stock Items (Quantity < %d) ===\n", threshold);
        count: integer;
        count = 0;
        
        for i in [0 : #numProducts]:
            if (#products[i].#quantity < threshold):
                #products[i].printProduct();
                write("\n");
                count = count + 1;
            endif;
        endfor;
        
        if (count == 0):
            write("No low stock items found.\n");
        else:
            write("Total Low Stock Items: %d\n", count);
        endif;
    enddef;
    
    def sortProductsByValue():
        -- Simple bubble sort by product value
        i, j: integer;
        temp: Product;
        
        for i in [0 : #numProducts - 1]:
            for j in [0 : #numProducts - i - 1]:
                if (#products[j].getValue() < #products[j + 1].getValue()):
                    temp = #products[j];
                    #products[j] = #products[j + 1];
                    #products[j + 1] = temp;
                endif;
            endfor;
        endfor;
    enddef;
endcomp;

-- Factory functions
def createCategory(n: str, i: integer) -> Category:
    c: Category;
    c.setCategory(n, i);
    return c;
enddef;

def createProduct(n: str, i: integer, p: scalar, q: integer, c: Category, e: integer) -> Product:
    prod: Product;
    prod.setProduct(n, i, p, q, c, e);
    return prod;
enddef;

def createGroceryStore(n: str, l: str) -> GroceryStore:
    store: GroceryStore;
    store.setStore(n, l);
    return store;
enddef;

-- Helper function to generate random product quantity
def randomQuantity() -> integer:
    return (next() % 100) + 1;
enddef;

-- Helper function to generate random product price
def randomPrice() -> scalar:
    return (next() % 1000) / 100.0 + 0.99;
enddef;

-- Helper function to generate random expiry days
def randomExpiryDays() -> integer:
    return (next() % 30) + 1;
enddef;

-- Main function
def main():
    -- Initialize variables
    next_random = 12345;
    maxProducts = 100;
    
    -- Create categories
    fruits: Category;
    vegetables: Category;
    dairy: Category;
    bakery: Category;
    
    fruits = createCategory("Fruits", 1);
    vegetables = createCategory("Vegetables", 2);
    dairy = createCategory("Dairy", 3);
    bakery = createCategory("Bakery", 4);
    
    -- Create grocery store
    myStore: GroceryStore;
    myStore = createGroceryStore("FreshMart", "Downtown");
    
    -- Add products
    p: Product;
    
    -- Add fruits
    p = createProduct("Apple", 101, randomPrice(), randomQuantity(), fruits, randomExpiryDays());
    myStore.addProduct(p);
    
    p = createProduct("Banana", 102, randomPrice(), randomQuantity(), fruits, randomExpiryDays());
    myStore.addProduct(p);
    
    p = createProduct("Orange", 103, randomPrice(), randomQuantity(), fruits, randomExpiryDays());
    myStore.addProduct(p);
    
    -- Add vegetables
    p = createProduct("Carrot", 201, randomPrice(), randomQuantity(), vegetables, randomExpiryDays());
    myStore.addProduct(p);
    
    p = createProduct("Broccoli", 202, randomPrice(), randomQuantity(), vegetables, randomExpiryDays());
    myStore.addProduct(p);
    
    -- Add dairy products
    p = createProduct("Milk", 301, randomPrice(), randomQuantity(), dairy, randomExpiryDays());
    myStore.addProduct(p);
    
    p = createProduct("Cheese", 302, randomPrice(), randomQuantity(), dairy, randomExpiryDays());
    myStore.addProduct(p);
    
    -- Add bakery products
    p = createProduct("Bread", 401, randomPrice(), randomQuantity(), bakery, randomExpiryDays());
    myStore.addProduct(p);
    
    p = createProduct("Cupcake", 402, randomPrice(), randomQuantity(), bakery, randomExpiryDays());
    myStore.addProduct(p);
    
    -- Print initial inventory
    myStore.printInventory();
    
    -- Update some products
    myStore.updateProductQuantity(101, 10);  -- Add 10 more apples
    myStore.updateProductPrice(301, 3.99);   -- Update milk price
    
    -- Print low stock items (less than 20)
    myStore.printLowStockItems(20);
    
    -- Sort products by value and print again
    myStore.sortProductsByValue();
    write("\n=== Inventory Sorted by Value ===\n");
    myStore.printInventory();
    
    -- Calculate and print the average price of all products
    totalPrice: scalar;
    averagePrice: scalar;
    totalPrice = 0;
    
    for i in [0 : myStore.#numProducts]:
        totalPrice = totalPrice + myStore.#products[i].#price;
    endfor;
    
    averagePrice = totalPrice / myStore.#numProducts;
    write("\nAverage Product Price: %.2f\n", averagePrice);
    
    -- Calculate and print the total number of products in inventory
    totalQuantity: integer;
    totalQuantity = 0;
    
    for i in [0 : myStore.#numProducts]:
        totalQuantity = totalQuantity + myStore.#products[i].#quantity;
    endfor;
    
    write("Total Items in Stock: %d\n", totalQuantity);
enddef;